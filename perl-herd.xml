<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/proj/en/perl/perl-herd.xml,v 1.1 2006/04/11 21:29:32 mcummings Exp $ -->

<!-- Do Not Translate !! -->
<guide link="/proj/en/java/java-devel.xml">
<title>Gentoo Perl Herd Guide</title>

<author title="Author">
  <mail link="mcummings@gentoo.org">Michael Cummings</mail>
</author>


<abstract>
In which Gentoo devs attempt to explain the mechanics of the perl herd...
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.0</version>
<date>2006-04-11</date>

<chapter>
<title>Intro</title>
<section id="Preliminaries">
<title>Preliminaries</title>
<body>

<p>
This document assumes a base understanding of general ebuild structure and
techniques. For more information, please see the following link.
</p>
<note>
	<uri link="http://www.gentoo.org/proj/en/devrel/handbook/hb-guide-ebuild.xml">Ebuild HOWTO</uri>
</note>

<p>
This document is intended to highlight those places where the
perl-module ebuild differs from the average ebuild, what special variables are
available, and what the preferred structure/style should be.
</p>
<note>
	If you are reading this guide because you want to submit ebuilds on bugzilla, please read this first:
	<uri link="http://www.gentoo.org/proj/en/devrel/handbook/hb-policy-ebuild.xml">Perl in the POLICY</uri>	
</note>

</body>
</section>
<section id="Ebuild Structure">
<title>Ebuild Structure</title>
<body>

<p>
The average perl module ebuild follows a stock structure, relying heavily on
its parent eclass, perl-module.eclass. The first active line of a perl-module
ebuild, then is:
</p>
<pre caption="">
inherit perl-module
</pre>
<p>
The perl-module eclass should be used for the building of any perl modules (code
that installs to /usr/$(get_libdir)/perl5 ). There is a separate eclass for 
applications that need use of the perl eclass functions, but that may not need 
the whole plethora. At the time of this writing the differences between the two
eclasses are minimal.
</p>
<p>
This inclusion of the perl-* eclass takes care of many of the actions 
handled in an ebuild, such as whether to use Makemaker.PL or Build.PL, 
pre-compile steps, documentation, etc. Some ebuilds in the portage tree 
do little more than inherit this eclass and define a few necessary items, such as HOMEPAGE,
LICENSE, KEYWORDS, and SRC_URI.
</p>
<note>By default, the perl-module eclass will now default to using Makefile.PL's
and only resorting to using the Build.PL if necessary. This follows an active
discussion the p5p mailing list in which it was highlighted that this is the 
preferred course by the authors of Module::Build</note>
<p>
In regards to SRC_URI, there is one note to keep in mind. If the source of the
module/code is located on the Comprehensive Perl Archive Network (CPAN),
please use the source of mirror://cpan/, which is actually translated as
http://some.cpan.mirror/CPAN. The reason for this is that although CPAN's
multiplexer is good at locating a mirror closest to you, it isn't perfect. By
using the thirdparty mirror ($PORTDIR/profiles/thirdpartymirrors), we allow
Gentoo users to substitute their preferred mirror location.
</p>
<p>
There is one variable unique to those ebuilds that inherit the perl-module
eclass, SRC_TEST. More detail will begin further in this document in regards
to perl testing, but it is this variable that will determine whether or not a
'make test' will be performed. If SRC_TEST is set to "do", the test block
within the perl-module eclass will be considered. A user must still have
test enabled in their features (/etc/make.conf) for these tests to be
performed, however.
</p>
</body>
</section>
<section id="Testing">
<title>Testing</title>
<body>
<p>
This discussion of the SRC_TEST variable brings us to the topic of testing in
perl modules. The activation of this feature is dependant on many factors. The
short of it is, not all perl module tests are created equally. Some factors to
consider when deciding to activate tests are:
</p>
<ul>
	<li>
	 Does the test even work? Write efficient perl module tests isn't always an
task, even for the author of the module. As anyone with multiple architectures
can attest to, what works on what computer doesn't necessarily work on
another. Non-working test suites do exist, and when encountered other steps
should be taken to test the functionality of the module. Examples from pods,
while still subject to typos, are generally good ways to test that a module is
functioning. 
	</li>
	<li>
	 What are the tests attempting to accomplish? Even if the tests work, it may
not be wise to enable them. If it's a database module, is it relying on a
running, local database to talk to in order to determine test success? If it's
a network related module, is it attempting to do anything on the network that
might raise a sysadmin's (or firewall's) hackles? Last year (2004), a CPAN
author had to retract the tests he included in a module because of security
concerns - his test suite would download remote code and attempt to execute.
In the context of the module, that made sense, but from a security
perspective, it was less than advisable.
	</li>
	<li>
	 Do the tests depend on something more than a headless console? Many of
the graphical widget and X related modules have detailed test suites to make sure
their created items will interact appropriately. Unfortunately, they rely on
an active X display and the interaction of the user. In the non-interactive
world of Gentoo testing and installation, however, this is a problem. Again,
these are good tests to use during initial testing of the ebuild, but are not
appropriate for the masses.
	</li>
	<li>
	 Do the tests introduce their own set of dependencies? Currently, Gentoo does
not support dependencies specifically for testing purposes. Unfortunately,
module authors don't have the same perspective. A fair number of modules
utilize specialized testing module suites for their own tests, but don't need
those modules either for building or for use on the live system. Over time,
some of these extraneous modules have made their way into the tree, and there
is the potential one day for a perl test suite of modules to be bundled into
portage. At this time however, including these testing modules as dependencies
can be costly to user disk and cycle times.
	</li>
</ul>
</body>
</section>

<section id="Dependencies">
<title>Dependencies</title>
<body>
<p>
Tracking dependencies, both on new and existing module ebuilds, is perhaps the
most time consuming aspect of adding a new module. There are three initial
files to check for expressed dependencies. One should not rely on the warning
output of a "perl Makefile.PL" to determine dependencies - this output only
displays missing dependencies in your own installation and is not
comprehensive of what dependencies are needed.
</p>
<p>
First, reading through the Makefile.PL in your favorite editor should give a
fair amount of information on what, if any, dependencies are declared. Both
the PREREQUISITE block, as well as any leading logic that determines what is
placed in the PREREQ block, will give an indication of expected dependencies.
</p>
<p>
If present, the META.YML file can contain a break down of build and run time
dependencies. Additionaly, if present, the Build.PL file will also indicate
any dependencies for the module's building.
</p>
<p>
Unfortunately, this isn't always enough, though generally speaking it is a
fair indication. You may also need to recursively grep for <b>use</b> and
<b>require</b> statements to make sure that the author hasn't forgotten to
list anything. Generally, this last step isn't necessary, but it is important
to keep in mind, especially when dealing with new packages. This last step
will also help if there is any question on DEPEND versus RDEPEND information.
</p>
<warn>BEWARE THE TANGLED PATH OF A NEW MODULE AND IT'S DEPENDENCIES.</warn>
<p>
Adding a single new module to the tree (either to fill a dependency or for its
own sake) can lead to adding a dozen supporting modules before you are done.
Though adding to the bulk of dev-perl isn't a goal, this is an understood
risk. One should also take note of updating an existing ebuild module, though - sometimes
dependencies for a module change over time, and they need to be checked rather
than merely relying on the existing ebuild.
</p>
<note>
Be sure to keep an eye out for module dependencies that are already fulfilled by 
having perl simply installed - and which perl they might have come with. If a Makfile.PL
lists Test::More => 0 as a dependency, then there is no point in putting this into
DEPEND since this was satisfied by having a working perl. But if they depend on 
Test::More => 0.62, you will need to check the virtuals directory.
</note>
</body>
</section>
</chapter>
</guide>
